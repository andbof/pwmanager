pwmanager is a python script for storing passwords, searchable by hostname and
user, in a gnupg encrypted git backed database. It can encrypt to multiple keys
and also fetch keys from LDAP, allowing you to easily and securely share and
version control passwords with others. This might be useful whenever multiple
people need to share passwords with one another.

Copyright (C) 2019 Andreas Bofj√§ll <andreas@gazonk.org>, see LICENSE for
licensing details.


WHERE TO GET IT

  The official repository is at github: https://github.com/andbof/pwmanager


BASIC INSTALLATION

  pwmanager is distributed using pythons setuptools. You can install directly
  from the github repository using pip3:

    pip3 install git+git://github.com/andbof/pwmanager.git

  Some options need to be set in the configuration file. A sample
  pwmanager.conf (called pwmanager.conf.sample) is included in the package.
  pip3 will install it in the pwmanager/data subdirectory of the appropriate
  python site-packages directory. It should be put in $HOME/.pwmanager/

  The standard location for your password repository is $HOME/.pwmanager/data

  pwmanager requires python3 >= 3.4 and some extra packages, see setup.py for
  details. Python 2.x is not supported.


USING IT

  Help is available by running

    pwmanager -h

  Help on actions is available by appending -h:

    pwmanager add -h

  Adding the password "secretpass" for the account "root" on "host.company.com"
  to the database:

    pwmanager add host.company.com root secretpass

  If you leave out "secretpass", pwmanager will prompt you for the password.

  Retrieving the same password:

    pwmanager get host.company.com root

  Note "pwmanager get" matches both the hostname and username as substrings and
  if you do not specify a username it will list all accounts, so all of these
  will find the above account (and maybe others):

    pwmanager get host.company.com roo
    pwmanager get host.company.com oot
    pwmanager get host.company.com r
    pwmanager get host.company.com r
    pwmanager get host.company.co
    pwmanager get com
    pwmanager get h

  Synchronizing with others

    pwmanager will always pull from and push to origin when there is an origin
    git remote configured. git adds 'origin' automatically if you clone an
    already existing repository, but you need to add it manually if you
    initialize it yourself or use 'pwmanager init'.

    To add a remote repository later, use the normal git way:

        cd /path/to/datastore
        git remote add origin URL

    In normal operation, pwmanager will, before doing anything, always fetch
    and rebase on the latest origin/master, and will push to origin/master
    afterwards. It will also retry this up to five times in case multiple
    people are in a rebase-race and pushing at the same time. However, if you
    just added a new origin remote it's a good idea to manually run:

        git fetch origin
        git rebase origin/master

    If any of the two commands above fail, you need to fix whatever git
    complains about or pwmanager will not work.


HOW ARE THE PASSWORDS STORED?
  aka
WHEN THE SCRIPT DOESN'T WORK AND YOU DESPERATELY NEED A PASSWORD

  All passwords are stored in separate files, one per password, in your
  datadir. They are encrypted using GnuPG to all keys you configured to use,
  so if you have a suitable key available in your local gnupg keyring and you
  want the password for 'user' on 'host', you can do so by just running gnupg:

      gnupg -o - -d datadir/host/user.gpg

  If this fails, ensure you have your secret key in your gnupg keyring.

  Why is every password in a separate file, you ask? Because that enables
  replacing individual passwords without having access to any secret key. This
  allows automated password rotation, for example.


TROUBLESHOOTING

  "Decryption failed"
    gnupg could probably not find your secret key. Make sure your secret key is
    available in your standard keyring in ~/.gnupg and that you're running the
    latest gnupg 2.x series.

    For debian stretch you need to install python3-gnupg from
    stretch-backports.

  "RuntimeError: No recipients to encrypt to!"
    You haven't added any key fingerprints in pwmanager.conf and haven't
    configured any other data source. There are simply no public keys
    configured to encrypt to.

  "I don't understand how to get the LDAP stuff working at all"
    pwmanager currently assumes you have a group (objectClass: posixGroup) with
    a memberUid attribute for every member. Those should map to whatever you've
    set as user_attr in pwmanager.conf.

    Next, pwmanager assumes the user has the attribute you've set as key_attr,
    which should be the DN of a PGP keyserver compatible entry under key_dn,
    normally 'ou=PGP Keys,dc=company,dc=com'.

    The same LDAP server must be able to act as a PGP compatible keyserver
    (hint: "gpg --send-keys" should work). Also, don't forget to uncomment the
    [ldap] header in pwmanager.conf.


KNOWN ISSUES

  pwmanager does not mlock() anything, mostly because doing so would require
  calling mlock() for the entire ~5 MB python binary.

  pwmanager currently does not support multiple git remotes. That should
  probably be implemented, for numerous reasons.
